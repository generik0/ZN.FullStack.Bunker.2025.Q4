// <auto-generated />
using System;
using Bunker.Domain.DBI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bunker.Api.Migrations
{
    [DbContext(typeof(BunkerDbContext))]
    [Migration("20251022201753_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bunker.Domain.Models.BunkerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("AluminumContentPPM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AnchorageArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("AshContentPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BargeCapacityMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BargeIMO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BargeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BerthNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BioFuelBlend")
                        .HasColumnType("bit");

                    b.Property<decimal?>("BioFuelPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CarbonFootprintMTCO2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CarbonResiduePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CertificateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificateIssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CertificateValidUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeliveryConfirmation")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DeliveryDurationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeliveryEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveryStartTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DensityAt15C")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountAmountUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DisputeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisputeResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DisputeResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisputeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentalCompliance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinalAmountUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FlashPointCelsius")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IMO2020Compliant")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InvoiceAmountUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("LocalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("LowSulfurFuel")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PipelineDelivery")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PipelineLengthMeters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PortCallId")
                        .HasColumnType("int");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PourPointCelsius")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("QualityAcceptance")
                        .HasColumnType("bit");

                    b.Property<string>("QualityIssues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualitySpecifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RefundAmountUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SampleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SampleLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleReceivedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleSealedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleStorageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SampleTaken")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ScheduledDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("SedimentContentPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SiliconContentPPM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal?>("SulfurContentPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SupplierContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierLicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SustainabilityCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TaxAmountUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TerminalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPriceUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TruckCount")
                        .HasColumnType("int");

                    b.Property<string>("TruckLicensePlates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPriceUSDPerMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("VanadiumContentPPM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VesselId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ViscosityAt50C")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VoyageId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WaterContentPercent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PortCallId");

                    b.HasIndex("PortId");

                    b.HasIndex("VesselId");

                    b.HasIndex("VoyageId");

                    b.ToTable("BunkerOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BioFuelBlend = false,
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 60, DateTimeKind.Utc).AddTicks(4437),
                            CreatedBy = "System",
                            Currency = "USD",
                            DeliveryConfirmation = false,
                            DeliveryMethod = "Barge",
                            FuelType = "MGO",
                            IMO2020Compliant = true,
                            LowSulfurFuel = false,
                            OrderNumber = "BO001-2024",
                            PipelineDelivery = false,
                            PortCallId = 1,
                            PortId = 1,
                            QualityAcceptance = false,
                            QuantityMT = 500m,
                            RequestedDate = new DateTime(2025, 10, 22, 20, 17, 49, 60, DateTimeKind.Utc).AddTicks(3083),
                            SampleTaken = false,
                            ScheduledDeliveryDate = new DateTime(2025, 10, 30, 20, 17, 49, 60, DateTimeKind.Utc).AddTicks(3342),
                            Status = "Requested",
                            SupplierName = "Singapore Fuel Co",
                            TotalPriceUSD = 325000m,
                            UnitPriceUSDPerMT = 650m,
                            VesselId = 1,
                            VoyageId = 1
                        },
                        new
                        {
                            Id = 2,
                            BioFuelBlend = false,
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 60, DateTimeKind.Utc).AddTicks(4840),
                            CreatedBy = "System",
                            Currency = "USD",
                            DeliveryConfirmation = false,
                            DeliveryMethod = "Barge",
                            FuelType = "IFO 380",
                            IMO2020Compliant = true,
                            LowSulfurFuel = false,
                            OrderNumber = "BO002-2024",
                            PipelineDelivery = false,
                            PortCallId = 2,
                            PortId = 2,
                            QualityAcceptance = false,
                            QuantityMT = 1000m,
                            RequestedDate = new DateTime(2025, 10, 22, 20, 17, 49, 60, DateTimeKind.Utc).AddTicks(4837),
                            SampleTaken = false,
                            ScheduledDeliveryDate = new DateTime(2025, 11, 2, 20, 17, 49, 60, DateTimeKind.Utc).AddTicks(4838),
                            Status = "Requested",
                            SupplierName = "Rotterdam Bunker Services",
                            TotalPriceUSD = 450000m,
                            UnitPriceUSDPerMT = 450m,
                            VesselId = 2,
                            VoyageId = 2
                        });
                });

            modelBuilder.Entity("Bunker.Domain.Models.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternativeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("AnnualCargoThroughputTEU")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AnnualVesselCalls")
                        .HasColumnType("int");

                    b.Property<decimal?>("AverageTurnaroundTimeHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AverageWaitingTimeHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasBulkFacilities")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBunkeringFacilities")
                        .HasColumnType("bit");

                    b.Property<bool>("HasContainerFacilities")
                        .HasColumnType("bit");

                    b.Property<bool>("HasLiquidFacilities")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPassengerFacilities")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRepairFacilities")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRoRoFacilities")
                        .HasColumnType("bit");

                    b.Property<bool>("Is24Hours")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIceFree")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Longitude");

                    b.Property<decimal?>("MaxDWT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxDraft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxVesselBeam")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaxVesselLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfBerths")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfTerminals")
                        .HasColumnType("int");

                    b.Property<string>("PortAuthority")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PortType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UNLOCODE")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Ports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Singapore",
                            Country = "Singapore",
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 58, DateTimeKind.Utc).AddTicks(2244),
                            CreatedBy = "System",
                            HasBulkFacilities = false,
                            HasBunkeringFacilities = true,
                            HasContainerFacilities = true,
                            HasLiquidFacilities = false,
                            HasPassengerFacilities = false,
                            HasRepairFacilities = false,
                            HasRoRoFacilities = false,
                            Is24Hours = true,
                            IsIceFree = true,
                            Latitude = 1.2966m,
                            Longitude = 103.7764m,
                            MaxDraft = 16m,
                            MaxVesselBeam = 60m,
                            MaxVesselLength = 400m,
                            Name = "Port of Singapore",
                            PortType = "Container Port",
                            Size = "Major",
                            Status = "Active",
                            TimeZone = "Asia/Singapore",
                            UNLOCODE = "SGSIN"
                        },
                        new
                        {
                            Id = 2,
                            City = "Rotterdam",
                            Country = "Netherlands",
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 58, DateTimeKind.Utc).AddTicks(2653),
                            CreatedBy = "System",
                            HasBulkFacilities = false,
                            HasBunkeringFacilities = true,
                            HasContainerFacilities = true,
                            HasLiquidFacilities = false,
                            HasPassengerFacilities = false,
                            HasRepairFacilities = false,
                            HasRoRoFacilities = false,
                            Is24Hours = true,
                            IsIceFree = true,
                            Latitude = 51.9225m,
                            Longitude = 4.4792m,
                            MaxDraft = 20m,
                            MaxVesselBeam = 60m,
                            MaxVesselLength = 400m,
                            Name = "Port of Rotterdam",
                            PortType = "Container Port",
                            Size = "Major",
                            Status = "Active",
                            TimeZone = "Europe/Amsterdam",
                            UNLOCODE = "NLRTM"
                        },
                        new
                        {
                            Id = 3,
                            City = "Los Angeles",
                            Country = "United States",
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 58, DateTimeKind.Utc).AddTicks(2658),
                            CreatedBy = "System",
                            HasBulkFacilities = false,
                            HasBunkeringFacilities = true,
                            HasContainerFacilities = true,
                            HasLiquidFacilities = false,
                            HasPassengerFacilities = false,
                            HasRepairFacilities = false,
                            HasRoRoFacilities = false,
                            Is24Hours = true,
                            IsIceFree = true,
                            Latitude = 33.7175m,
                            Longitude = -118.2728m,
                            MaxDraft = 15m,
                            MaxVesselBeam = 60m,
                            MaxVesselLength = 400m,
                            Name = "Port of Los Angeles",
                            PortType = "Container Port",
                            Size = "Major",
                            Status = "Active",
                            TimeZone = "America/Los_Angeles",
                            UNLOCODE = "USLAX"
                        },
                        new
                        {
                            Id = 4,
                            City = "Hamburg",
                            Country = "Germany",
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 58, DateTimeKind.Utc).AddTicks(2662),
                            CreatedBy = "System",
                            HasBulkFacilities = false,
                            HasBunkeringFacilities = true,
                            HasContainerFacilities = true,
                            HasLiquidFacilities = false,
                            HasPassengerFacilities = false,
                            HasRepairFacilities = false,
                            HasRoRoFacilities = false,
                            Is24Hours = true,
                            IsIceFree = true,
                            Latitude = 53.5511m,
                            Longitude = 9.9937m,
                            MaxDraft = 14m,
                            MaxVesselBeam = 50m,
                            MaxVesselLength = 350m,
                            Name = "Port of Hamburg",
                            PortType = "Container Port",
                            Size = "Major",
                            Status = "Active",
                            TimeZone = "Europe/Berlin",
                            UNLOCODE = "DEHAM"
                        });
                });

            modelBuilder.Entity("Bunker.Domain.Models.PortCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualDeparture")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnchorageArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ArrivalDelayHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BerthCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BerthDraftMeters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BerthLengthMeters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BerthNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BerthType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BerthWidthMeters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BunkerCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BunkerQuantityMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BunkerSupplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BunkerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BunkeringDurationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BunkeringEndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("BunkeringRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BunkeringStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CallType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CargoHandlingDurationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CargoHandlingEndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CargoHandlingRateMTPerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CargoHandlingStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CargoOperations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CargoType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CargoVolumeM3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CargoWeightMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ContainerCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("CrewChangeCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("CrewChangeRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("CrewJoiningCount")
                        .HasColumnType("int");

                    b.Property<int?>("CrewLeavingCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("CustomsClearanceCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CustomsClearanceDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CustomsClearanceRequired")
                        .HasColumnType("bit");

                    b.Property<string>("CustomsClearanceStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DepartureDelayHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DischargingWeightMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FreshWaterCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FreshWaterQuantityMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("FreshWaterRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("HasIncidents")
                        .HasColumnType("bit");

                    b.Property<decimal?>("IncidentCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("IncidentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentSeverity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectionAuthority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("InspectionCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InspectionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("InspectionResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAnchorage")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LoadingWeightMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PilotAssigned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PilotBoardingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PilotName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PilotRequired")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PilotageCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PortCallNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("PortChargesUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProvisionsCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ProvisionsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ProvisionsSupplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RepairCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RepairDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RepairDurationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RepairEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RepairStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RepairSupplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepairType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RepairsRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ScheduledArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledDeparture")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeaState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TEUCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("TerminalCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TerminalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminalOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalDurationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPortCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("TugAssistanceRequired")
                        .HasColumnType("bit");

                    b.Property<decimal?>("TugCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TugCount")
                        .HasColumnType("int");

                    b.Property<string>("TugNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VesselId")
                        .HasColumnType("int");

                    b.Property<decimal?>("VisibilityNauticalMiles")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VoyageId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WaveHeightMeters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WeatherConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WindSpeedKnots")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PortId");

                    b.HasIndex("VesselId");

                    b.HasIndex("VoyageId");

                    b.ToTable("PortCalls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BunkeringRequired = false,
                            CargoOperations = "Container Loading",
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 59, DateTimeKind.Utc).AddTicks(6332),
                            CreatedBy = "System",
                            CrewChangeRequired = false,
                            CustomsClearanceRequired = false,
                            FreshWaterRequired = false,
                            HasIncidents = false,
                            InspectionRequired = false,
                            IsAnchorage = false,
                            PilotAssigned = false,
                            PilotRequired = false,
                            PortCallNumber = "PC001-2024",
                            PortId = 1,
                            ProvisionsRequired = false,
                            Purpose = "Loading",
                            RepairsRequired = false,
                            ScheduledArrival = new DateTime(2025, 10, 29, 20, 17, 49, 59, DateTimeKind.Utc).AddTicks(4726),
                            ScheduledDeparture = new DateTime(2025, 10, 31, 20, 17, 49, 59, DateTimeKind.Utc).AddTicks(4982),
                            Status = "Scheduled",
                            TugAssistanceRequired = false,
                            VesselId = 1,
                            VoyageId = 1
                        },
                        new
                        {
                            Id = 2,
                            BunkeringRequired = false,
                            CargoOperations = "Bulk Cargo Loading",
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 59, DateTimeKind.Utc).AddTicks(6744),
                            CreatedBy = "System",
                            CrewChangeRequired = false,
                            CustomsClearanceRequired = false,
                            FreshWaterRequired = false,
                            HasIncidents = false,
                            InspectionRequired = false,
                            IsAnchorage = false,
                            PilotAssigned = false,
                            PilotRequired = false,
                            PortCallNumber = "PC002-2024",
                            PortId = 2,
                            ProvisionsRequired = false,
                            Purpose = "Loading",
                            RepairsRequired = false,
                            ScheduledArrival = new DateTime(2025, 11, 1, 20, 17, 49, 59, DateTimeKind.Utc).AddTicks(6740),
                            ScheduledDeparture = new DateTime(2025, 11, 3, 20, 17, 49, 59, DateTimeKind.Utc).AddTicks(6742),
                            Status = "Scheduled",
                            TugAssistanceRequired = false,
                            VesselId = 2,
                            VoyageId = 2
                        });
                });

            modelBuilder.Entity("Bunker.Domain.Models.Vessel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Beam")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CallSign")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("DeadweightTonnage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Draft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EnginePowerKW")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("GrossTonnage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IMO")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<decimal?>("LengthOverall")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MMSI")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int?>("MaxCrew")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxSpeedKnots")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VesselType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vessels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Beam = 32m,
                            CallSign = "ABCD123",
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 56, DateTimeKind.Utc).AddTicks(7298),
                            CreatedBy = "System",
                            DeadweightTonnage = 60000m,
                            Draft = 12m,
                            EnginePowerKW = 15000m,
                            Flag = "Panama",
                            GrossTonnage = 50000m,
                            IMO = "1234567",
                            LengthOverall = 200m,
                            MMSI = "123456789",
                            MaxCrew = 25,
                            MaxSpeedKnots = 22m,
                            Name = "MV Atlantic Star",
                            Owner = "Atlantic Shipping Ltd",
                            Status = "Active",
                            VesselType = "Container Ship",
                            YearBuilt = 2015
                        },
                        new
                        {
                            Id = 2,
                            Beam = 40m,
                            CallSign = "EFGH456",
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 56, DateTimeKind.Utc).AddTicks(7747),
                            CreatedBy = "System",
                            DeadweightTonnage = 85000m,
                            Draft = 15m,
                            EnginePowerKW = 20000m,
                            Flag = "Liberia",
                            GrossTonnage = 75000m,
                            IMO = "2345678",
                            LengthOverall = 250m,
                            MMSI = "234567890",
                            MaxCrew = 30,
                            MaxSpeedKnots = 18m,
                            Name = "MV Pacific Explorer",
                            Owner = "Pacific Maritime Corp",
                            Status = "Active",
                            VesselType = "Bulk Carrier",
                            YearBuilt = 2018
                        },
                        new
                        {
                            Id = 3,
                            Beam = 50m,
                            CallSign = "IJKL789",
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 56, DateTimeKind.Utc).AddTicks(7753),
                            CreatedBy = "System",
                            DeadweightTonnage = 120000m,
                            Draft = 18m,
                            EnginePowerKW = 25000m,
                            Flag = "Marshall Islands",
                            GrossTonnage = 100000m,
                            IMO = "3456789",
                            LengthOverall = 300m,
                            MMSI = "345678901",
                            MaxCrew = 35,
                            MaxSpeedKnots = 16m,
                            Name = "MV Indian Ocean",
                            Owner = "Ocean Transport Ltd",
                            Status = "Active",
                            VesselType = "Tanker",
                            YearBuilt = 2020
                        });
                });

            modelBuilder.Entity("Bunker.Domain.Models.Voyage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualDeparture")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ActualDurationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ArrivalPortId")
                        .HasColumnType("int");

                    b.Property<decimal?>("AverageSpeedKnots")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BunkerOrderCount")
                        .HasColumnType("int");

                    b.Property<string>("CaptainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CargoOwner")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CargoType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("CargoVolumeM3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CargoWeightMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CharterDurationDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("CharterRateUSDPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CharterType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Charterer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ChiefEngineerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CrewCount")
                        .HasColumnType("int");

                    b.Property<bool>("CrossesDateLine")
                        .HasColumnType("bit");

                    b.Property<bool>("CrossesEquator")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DelayCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DelayDurationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DelayReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeparturePortId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DistanceNauticalMiles")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EstimatedDurationHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FuelConsumptionMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FuelCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasDelays")
                        .HasColumnType("bit");

                    b.Property<bool>("HasIncidents")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IncidentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncidentSeverity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInternational")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxSpeedKnots")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PassengerCount")
                        .HasColumnType("int");

                    b.Property<int>("PortCallCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProfitLossUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RevenueUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ScheduledArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledDeparture")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeaState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TEUCount")
                        .HasColumnType("int");

                    b.Property<int?>("TimeZoneChanges")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalBunkerCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalBunkerQuantityMT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalCostUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VesselId")
                        .HasColumnType("int");

                    b.Property<decimal?>("VisibilityNauticalMiles")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VoyageNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("WaveHeightMeters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WeatherConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WindSpeedKnots")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalPortId");

                    b.HasIndex("DeparturePortId");

                    b.HasIndex("VesselId");

                    b.ToTable("Voyages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalPortId = 2,
                            BunkerOrderCount = 0,
                            CargoType = "Containers",
                            CargoWeightMT = 50000m,
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 58, DateTimeKind.Utc).AddTicks(9769),
                            CreatedBy = "System",
                            CrossesDateLine = false,
                            CrossesEquator = false,
                            DeparturePortId = 1,
                            DistanceNauticalMiles = 8000m,
                            HasDelays = false,
                            HasIncidents = false,
                            IsInternational = true,
                            PortCallCount = 0,
                            ScheduledArrival = new DateTime(2025, 11, 11, 20, 17, 49, 58, DateTimeKind.Utc).AddTicks(8248),
                            ScheduledDeparture = new DateTime(2025, 10, 29, 20, 17, 49, 58, DateTimeKind.Utc).AddTicks(7854),
                            Status = "Planned",
                            VesselId = 1,
                            VoyageNumber = "V001-2024"
                        },
                        new
                        {
                            Id = 2,
                            ArrivalPortId = 3,
                            BunkerOrderCount = 0,
                            CargoType = "Bulk Cargo",
                            CargoWeightMT = 75000m,
                            CreatedAt = new DateTime(2025, 10, 22, 20, 17, 49, 59, DateTimeKind.Utc).AddTicks(177),
                            CreatedBy = "System",
                            CrossesDateLine = false,
                            CrossesEquator = false,
                            DeparturePortId = 2,
                            DistanceNauticalMiles = 6000m,
                            HasDelays = false,
                            HasIncidents = false,
                            IsInternational = true,
                            PortCallCount = 0,
                            ScheduledArrival = new DateTime(2025, 11, 16, 20, 17, 49, 59, DateTimeKind.Utc).AddTicks(174),
                            ScheduledDeparture = new DateTime(2025, 11, 1, 20, 17, 49, 59, DateTimeKind.Utc).AddTicks(173),
                            Status = "Planned",
                            VesselId = 2,
                            VoyageNumber = "V002-2024"
                        });
                });

            modelBuilder.Entity("Bunker.Domain.Models.BunkerOrder", b =>
                {
                    b.HasOne("Bunker.Domain.Models.PortCall", "PortCall")
                        .WithMany("BunkerOrders")
                        .HasForeignKey("PortCallId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bunker.Domain.Models.Port", "Port")
                        .WithMany("BunkerOrders")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bunker.Domain.Models.Vessel", "Vessel")
                        .WithMany("BunkerOrders")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bunker.Domain.Models.Voyage", "Voyage")
                        .WithMany("BunkerOrders")
                        .HasForeignKey("VoyageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Port");

                    b.Navigation("PortCall");

                    b.Navigation("Vessel");

                    b.Navigation("Voyage");
                });

            modelBuilder.Entity("Bunker.Domain.Models.PortCall", b =>
                {
                    b.HasOne("Bunker.Domain.Models.Port", "Port")
                        .WithMany("PortCalls")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bunker.Domain.Models.Vessel", "Vessel")
                        .WithMany("PortCalls")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bunker.Domain.Models.Voyage", "Voyage")
                        .WithMany("PortCalls")
                        .HasForeignKey("VoyageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Port");

                    b.Navigation("Vessel");

                    b.Navigation("Voyage");
                });

            modelBuilder.Entity("Bunker.Domain.Models.Voyage", b =>
                {
                    b.HasOne("Bunker.Domain.Models.Port", "ArrivalPort")
                        .WithMany("ArrivalVoyages")
                        .HasForeignKey("ArrivalPortId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bunker.Domain.Models.Port", "DeparturePort")
                        .WithMany("DepartureVoyages")
                        .HasForeignKey("DeparturePortId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bunker.Domain.Models.Vessel", "Vessel")
                        .WithMany("Voyages")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArrivalPort");

                    b.Navigation("DeparturePort");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Bunker.Domain.Models.Port", b =>
                {
                    b.Navigation("ArrivalVoyages");

                    b.Navigation("BunkerOrders");

                    b.Navigation("DepartureVoyages");

                    b.Navigation("PortCalls");
                });

            modelBuilder.Entity("Bunker.Domain.Models.PortCall", b =>
                {
                    b.Navigation("BunkerOrders");
                });

            modelBuilder.Entity("Bunker.Domain.Models.Vessel", b =>
                {
                    b.Navigation("BunkerOrders");

                    b.Navigation("PortCalls");

                    b.Navigation("Voyages");
                });

            modelBuilder.Entity("Bunker.Domain.Models.Voyage", b =>
                {
                    b.Navigation("BunkerOrders");

                    b.Navigation("PortCalls");
                });
#pragma warning restore 612, 618
        }
    }
}
